Input : 
         1
        / \
       2   3

Output : 
       [1, 2]

Explanation : Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST 

vector<int> Solution::recoverTree(TreeNode* A) {
    vector<int > v;
    vector<int > res;
    stack<TreeNode* > s;
    TreeNode* cur=A;
    while(!s.empty()|| cur){
        if(cur){
            s.push(cur);
            cur=cur->left;
        }else{
            TreeNode* temp=s.top();
            s.pop();
            v.push_back(temp->val);
            cur=temp->right;
        }
    }
    for(int i=v.size()-1;i>=1;i--){
        if(v[i]<v[i-1]){
            res.push_back(v[i]);
            break;
        }
    }
    for(int i=0;i<v.size();i++){
        if(v[i]>v[i+1]){
            res.push_back(v[i]);
            break;
        }
    }
    return res;
}