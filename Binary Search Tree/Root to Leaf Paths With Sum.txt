Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example: Given the below binary tree and sum = 22,

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1

return

[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
void leafPathWithSum(TreeNode* root,int sum,vector<vector<int>> &res,vector<int> &ans){
    if(root==NULL)
        return;
    int presentsum=sum-root->val;
    ans.push_back(root->val);
    if(root->left==NULL && root->right==NULL){
        if(presentsum==0){
            res.push_back(ans);
        }
        ans.pop_back();
        return;
    }
    leafPathWithSum(root->left,presentsum,res,ans);
    leafPathWithSum(root->right,presentsum,res,ans);
    ans.pop_back();
}
vector<vector<int> > Solution::pathSum(TreeNode* A, int B) {
    vector<vector<int>> res;
    vector<int> ans;
    leafPathWithSum(A,B,res,ans);
    return res;
}