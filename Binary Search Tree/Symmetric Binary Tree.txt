Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

Example :

    1
   / \
  2   2
 / \ / \
3  4 4  3

The above binary tree is symmetric. But the following is not:

    1
   / \
  2   2
   \   \
   3    3

Return 0 / 1 ( 0 for false, 1 for true ) for this problem

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int Solution::isSymmetric(TreeNode* A) {
    queue<TreeNode*> q;
    q.push(A->left);
    q.push(A->right);
    while(!q.empty()){
        TreeNode* childLeft=q.front();
        q.pop();
        TreeNode* childRight=q.front();
        q.pop();
        if(!childLeft && !childRight)
            return 1;
        if((!childLeft && childRight)||(childLeft && !childRight))
            return 0;
        if(childLeft->val!=childRight->val)
            return 0;
        q.push(childLeft->left);
        q.push(childRight->right);
        q.push(childLeft->right);
        q.push(childRight->left);
    }
    
}
