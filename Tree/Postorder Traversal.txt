Given a binary tree, return the postorder traversal of its nodes' values.

Example :

Given binary tree

   1
    \
     2
    /
   3

return [3,2,1].

Using recursion is not allowed.

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    int balanced = 1;
    
	public int isBalanced(TreeNode A) {
	    
	    balanced(A);
	    return balanced;
	    
	}
	
	public int balanced(TreeNode A) {
	    
	    if (A == null)
	        return 0;
	        
	    int heightLeft = 1 + balanced(A.left);
	    int heightRight = 1 + balanced(A.right);
	    
	    if (Math.abs(heightLeft - heightRight) > 1)
	        balanced = 0;
	    
	    return Math.max(heightLeft, heightRight);
	    
	}
}
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::postorderTraversal(TreeNode* A) {
    vector<int> v;
    stack<TreeNode *> s1;
    if(A==NULL)
        return v;
    s1.push(A);
    while(!s1.empty()){
        TreeNode* temp=s1.top();
        s1.pop();
        v.push_back(temp->val);
        if(temp->left)
            s1.push(temp->left);
        if(temp->right)
            s1.push(temp->right);
    }
    reverse(v.begin(),v.end());
    return v;
 
    
}
